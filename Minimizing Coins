import java.io.*;
import java.math.*;
import java.util.*;
 
 
 
 
public class Main {
 
    static MyScanner in = new MyScanner();
    static   PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static long H,W;
    static BitSet bs;
    static long mod = 1000000007;
      // All possible moves of a knight 
    static   int X[] = { 2, 1, -1, -2, -2, -1, 1, 2 }; 
    static int Y[] = { 1, 2, 2, 1, -1, -2, -2, -1 }; 
    static int [] dr   = {-1,0,0,1};
    static int [] dc = {0,1,-1,0};
    static int [] parent;
  
    static int max = 1000*1000*10;
 
    public static void main(String args[]) throws IOException {
    /**
1.What is the unknown:
2.What are the data: an array of tlen ght  the value is 10^9
3.What is the condition: 
4. understand the problem:
5. What are the cases edges in the problem:
6.What what max:
7. Are you using a data stcuture. And which one:
8.Is there reursion what is the base case. For example COINS:
*/
            int n = in.nextInt();
            int x = in.nextInt();
          ArrayList <Integer> list = new ArrayList<Integer>();
            for(int i=0;i<n;i++){
                list.add(in.nextInt());
            }
            Collections.sort(list);
            //consider a x by1 dp arrray show the oncdiotinal state each one
            long [] dp = new long[x+1];
            Arrays.fill(dp,-1);
            dp[0] = 0;
            for(int state=1;state<=x;state++){
                long step = -1;
                for(int j=0;j<n;j++){
                    int previousState  = state-list.get(j);
                    if(previousState>=0&&dp[previousState]!=-1){
                        if(step==-1){
                            step = 100000000;
                        }
                        step = Math.min(dp[previousState]+1,step);
                        dp[state] =step;
                    }
                }
            }
            out.println(dp[x]);
           out.flush();
 
    }
 
 
    private static int lowrBound(int[] a, int lo, int hi, int element) {
        while(lo<hi){
            int mid = lo+(hi-lo)/2;
            if(element>a[mid]){
                lo = mid+1;
            }else{
                hi  = mid;
            }
        }
        if(lo<a.length&&a[lo]==element){
            return lo+1;
        }
        return lo;
    }
 
    static long lcm(int a, int b) {
        return (a*b)/gcd(a, b);
    }
    static boolean isVowel(char c) {
        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y'){
            return true;
        }
        return false ;
    }
    static class IP implements Comparable<IP>{
        public int first,second;
        IP(int first, int second){
            this.first = first;
            this.second = second;
        }
        public int compareTo(IP ip){
            if(first==ip.first)
                return second-ip.second;
            return first-ip.first;    
        }
        @Override
        public String toString() {
            return first+" -  "+second;
        }
 
    }
 
       static long gcd(long a, long b){
        return b!=0?gcd(b, a%b):a;
    }
 
        static boolean isEven(long a) {
            return (a&1)==0;
        }
 
    public static class MyScanner {
        BufferedReader br;
        StringTokenizer st;
 
        public MyScanner() {
           br = new BufferedReader(new InputStreamReader(System.in));
        }
 
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt() {
            return Integer.parseInt(next());
        }
 
        long nextLong() {
            return Long.parseLong(next());
        }
 
        double nextDouble() {
            return Double.parseDouble(next());
        }
 
        String nextLine(){
            String str = "";
        try {
           str = br.readLine();
        } catch (IOException e) {
           e.printStackTrace();
        }
        return str;
        }
 
     }
