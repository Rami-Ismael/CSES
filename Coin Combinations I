import java.io.*;
import java.math.*;
import java.util.*;




public class Coin_Combination {

    static MyScanner in = new MyScanner();
    static   PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static long H,W;
    static BitSet bs;
    static long mod = 1000000007;
      // All possible moves of a knight 
    static   int X[] = { 2, 1, -1, -2, -2, -1, 1, 2 }; 
    static int Y[] = { 1, 2, 2, 1, -1, -2, -2, -1 }; 
    static int [] dr   = {-1,0,0,1};
    static int [] dc = {0,1,-1,0};
    static int [] parent;
    //create your sort method
    static int max = 1000*1000*10;

    public static void main(String args[]) throws IOException {
    /**
1.What is the unknown:
2.What are the data: an array of tlen ght  the value is 10^9
3.What is the condition: 
4. understand the problem:
5. What are the cases edges in the problem:
6.What what max:
7. Are you using a data stcuture. And which one:
8.Is there reursion what is the base case. For example COINS:
*/
         int n = in.nextInt();
         int x = in.nextInt();
         int[] coins = new int[n];
         long [] dp = new long[x+1];
         for(int i=0;i<n;i++){
             int p = in.nextInt();
            if(p<=x){
             dp[p] = 1;
            }
            coins[i] = p;
         }
         shuffleArray(coins);
        Arrays.sort(coins);
         for(int state=1;state<=x;state++){
             for(int condition = 0; condition<n;condition++){
                int condionVal  = coins[condition];
                int previoStae = state-condionVal;
                if(previoStae>=0){
                    dp[state]+=dp[previoStae];
                    if(dp[state]>=mod)
                        dp[state]-=mod;
                }
             }
         }
         out.println(dp[x]);
           out.flush();

    }

   static  void shuffleArray(int[] arr){
        int n = arr.length;
        Random rnd = new Random();
        for(int i=0; i<n; ++i){
            int tmp = arr[i];
            int randomPos = i + rnd.nextInt(n-i);
            arr[i] = arr[randomPos];
            arr[randomPos] = tmp;
        }   
}
    private static int lowrBound(int[] a, int lo, int hi, int element) {
        while(lo<hi){
            int mid = lo+(hi-lo)/2;
            if(element>a[mid]){
                lo = mid+1;
            }else{
                hi  = mid;
            }
        }
        if(lo<a.length&&a[lo]==element){
            return lo+1;
        }
        return lo;
    }

    static long lcm(int a, int b) {
        return (a*b)/gcd(a, b);
    }
    static boolean isVowel(char c) {
        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y'){
            return true;
        }
        return false ;
    }
    static class IP implements Comparable<IP>{
        public int first,second;
        IP(int first, int second){
            this.first = first;
            this.second = second;
        }
        public int compareTo(IP ip){
            if(first==ip.first)
                return second-ip.second;
            return first-ip.first;    
        }
        @Override
        public String toString() {
            return first+" -  "+second;
        }

    }

       static long gcd(long a, long b){
        return b!=0?gcd(b, a%b):a;
    }

        static boolean isEven(long a) {
            return (a&1)==0;
        }

    public static class MyScanner {
        BufferedReader br;
        StringTokenizer st;

        public MyScanner() {
           br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine(){
            String str = "";
        try {
           str = br.readLine();
        } catch (IOException e) {
           e.printStackTrace();
        }
        return str;
        }

     }
      /*Function to sort array using insertion sort*/
    void InsertionSort(int arr[]) 
    { 
        int n = arr.length; 
        for (int i = 1; i < n; ++i) { 
            int key = arr[i]; 
            int j = i - 1; 
  
            /* Move elements of arr[0..i-1], that are 
               greater than key, to one position ahead 
               of their current position */
            while (j >= 0 && arr[j] > key) { 
                arr[j + 1] = arr[j]; 
                j = j - 1; 
            } 
            arr[j + 1] = key; 
        } 
    } 
}
